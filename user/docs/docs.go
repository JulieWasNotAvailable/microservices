// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/activity/followersNumberByBeatmakerId/{beatmakerId}": {
            "get": {
                "description": "Get the number of followers for a specific beatmaker",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "activity"
                ],
                "summary": "Get beatmaker's followers count",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Beatmaker ID",
                        "name": "beatmakerId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Followers count",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid beatmaker ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/activity/subscribeTo/{beatmakerId}": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Subscribe the authenticated user to a beatmaker",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "activity"
                ],
                "summary": "Subscribe to a beatmaker",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Beatmaker ID to subscribe to",
                        "name": "beatmakerId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Subscription details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid beatmaker ID or self-subscription attempt",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/activity/unsubscribe/{beatmakerId}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Unsubscribe the authenticated user from a beatmaker",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "activity"
                ],
                "summary": "Unsubscribe from a beatmaker",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Beatmaker ID to unsubscribe from",
                        "name": "beatmakerId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Unsubscription confirmation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid beatmaker ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/activity/viewMySubscriptions": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get all beatmakers the authenticated user is subscribed to",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "activity"
                ],
                "summary": "Get user's subscriptions",
                "responses": {
                    "200": {
                        "description": "List of subscriptions",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/google/getjwt": {
            "post": {
                "description": "Authenticate user using Google OAuth token and return JWT",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Authenticate with Google",
                "parameters": [
                    {
                        "description": "Google OAuth token",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/presenters.Data"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns JWT token and user info",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "201": {
                        "description": "Returns JWT token and user info (new user)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Invalid Google token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Authenticate user with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authentication.LoginInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/presenters.UserSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/presenters.UserErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/presenters.UserErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/presenters.UserErrorResponse"
                        }
                    }
                }
            }
        },
        "/metadata": {
            "post": {
                "description": "Add new metadata entry to the system. In request \"id\" should be eliminated.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metadata"
                ],
                "summary": "Add new metadata",
                "parameters": [
                    {
                        "description": "Metadata to add",
                        "name": "metadata",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.Metadata"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/presenters.MetadataSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/presenters.MetadataErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/presenters.MetadataErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/presenters.MetadataErrorResponse"
                        }
                    }
                }
            }
        },
        "/metadataById/{id}": {
            "get": {
                "description": "Get metadata entry by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metadata"
                ],
                "summary": "Get metadata by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Metadata ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/presenters.MetadataSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/presenters.MetadataErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/presenters.MetadataErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete metadata entry by its ID. You need to be loged in. You can delete anybody's metadata.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metadata"
                ],
                "summary": "Delete metadata",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Metadata ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful deletion response",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/presenters.MetadataErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/presenters.MetadataErrorResponse"
                        }
                    }
                }
            }
        },
        "/metadatas": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metadata"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/presenters.MetadataSuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/presenters.MetadataErrorResponse"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Authenticate user with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User Register",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authentication.RegisterInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/presenters.UserSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/presenters.UserErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/presenters.UserErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/presenters.UserErrorResponse"
                        }
                    }
                }
            }
        },
        "/user": {
            "post": {
                "description": "Create a new user with default role (1)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/presenters.UserSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/presenters.UserErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/presenters.UserErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/presenters.UserErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/me": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve current user details from JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get current user by JWT",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/presenters.UserSuccessResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/presenters.UserErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/presenters.UserErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update user details (requires authentication). Updates profile by jwt.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user WITHOUGHT METADATA.",
                "parameters": [
                    {
                        "description": "Updated user data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/presenters.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/presenters.UserSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/presenters.UserErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/presenters.UserErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/presenters.UserErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/me/withmeta": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update user details (requires authentication). Updates profile by jwt.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user with metadata. Beatmaker role required. If user has no metadata, new is created with update data.",
                "parameters": [
                    {
                        "description": "Updated user data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/presenters.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/presenters.UserSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/presenters.UserErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/presenters.UserErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/presenters.UserErrorResponse"
                        }
                    }
                }
            }
        },
        "/userByEmail/": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve a single user by their email. Requires authorization. Requires admin role.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user by email.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User Email",
                        "name": "email",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/presenters.UserSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/presenters.UserErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/presenters.UserErrorResponse"
                        }
                    }
                }
            }
        },
        "/userById/{id}": {
            "get": {
                "description": "Retrieve a single user by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/presenters.UserSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/presenters.UserErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/presenters.UserErrorResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Retrieve a list of all users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get all users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/presenters.UserSuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/presenters.UserErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/me": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete the current user account by jwt.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/presenters.UserErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/presenters.UserErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/me/upgrade": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Change user role to beatmaker (role 2). Requires jwt. Updates the role of the user based on given jwt.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Upgrade user to beatmaker",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/presenters.UserErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/presenters.UserErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "authentication.LoginInput": {
            "description": "Login Input",
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john_molly@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "securepassword123"
                }
            }
        },
        "authentication.RegisterInput": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "eugene@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "securepassword123"
                }
            }
        },
        "entities.Metadata": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "the best beatmaker ever"
                },
                "id": {
                    "type": "string"
                },
                "instagramUrl": {
                    "type": "string",
                    "example": "insta.com/i_love_bunnies"
                },
                "subscriptionTypeId": {
                    "type": "integer",
                    "example": 3
                },
                "telegramUrl": {
                    "type": "string",
                    "example": "tg.com/i_love_bunnies"
                },
                "userId": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "vkUrl": {
                    "type": "string",
                    "example": "vk.com/i_love_bunnies"
                }
            }
        },
        "entities.User": {
            "description": "User",
            "type": "object",
            "required": [
                "email",
                "password",
                "roleId"
            ],
            "properties": {
                "beatmakerFollowedByUser": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.User_Follows_Beatmakers"
                    }
                },
                "email": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 5,
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "firstname": {
                    "type": "string",
                    "example": "John"
                },
                "followerOf": {
                    "type": "integer",
                    "example": 10
                },
                "id": {
                    "type": "string",
                    "example": "1"
                },
                "lastname": {
                    "type": "string",
                    "example": "Doe"
                },
                "metadata": {
                    "$ref": "#/definitions/entities.Metadata"
                },
                "password": {
                    "description": "Never exposed in responses",
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 6,
                    "example": "securepassword123"
                },
                "patronymic": {
                    "type": "string",
                    "example": "Smith"
                },
                "profilepicture": {
                    "type": "string",
                    "example": "https://storage.yandexcloud.net/imagesall/01961f2b-61b4-74ee-8e5b-26044ec630ea"
                },
                "roleId": {
                    "type": "integer",
                    "example": 1
                },
                "subscriptionId": {
                    "type": "integer",
                    "example": 1
                },
                "userFollowsBeatmaker": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.User_Follows_Beatmakers"
                    }
                },
                "username": {
                    "type": "string",
                    "example": "johndoe"
                }
            }
        },
        "entities.User_Follows_Beatmakers": {
            "type": "object",
            "properties": {
                "beatmaker": {
                    "$ref": "#/definitions/entities.User"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "presenters.Data": {
            "description": "Data Token",
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "presenters.Metadata": {
            "description": "Metadata entity containing social links and description",
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Artist profile description"
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "instagramUrl": {
                    "type": "string",
                    "example": "https://instagram.com/username"
                },
                "subscriptionTypeId": {
                    "type": "integer",
                    "example": 1
                },
                "telegramUrl": {
                    "type": "string",
                    "example": "https://t.me/username"
                },
                "userId": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "vkUrl": {
                    "type": "string",
                    "example": "https://vk.com/username"
                }
            }
        },
        "presenters.MetadataErrorResponse": {
            "description": "Error response for metadata operations",
            "type": "object",
            "properties": {
                "data": {
                    "type": "string",
                    "example": "null"
                },
                "error": {
                    "type": "string",
                    "example": "error message"
                },
                "status": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "presenters.MetadataSuccessResponse": {
            "description": "Standard response for single metadata operation",
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/presenters.Metadata"
                },
                "error": {
                    "type": "string",
                    "example": "null"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "presenters.User": {
            "description": "User information",
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "firstname": {
                    "type": "string",
                    "example": "John"
                },
                "followerOf": {
                    "type": "integer",
                    "example": 4
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "lastname": {
                    "type": "string",
                    "example": "Doe"
                },
                "metadata": {
                    "$ref": "#/definitions/presenters.Metadata"
                },
                "patronymic": {
                    "type": "string",
                    "example": "Smith"
                },
                "profilepicture": {
                    "type": "string",
                    "example": "https://storage.yandexcloud.net/imagesall/01961f2b-61b4-74ee-8e5b-26044ec630ea"
                },
                "roleId": {
                    "type": "integer",
                    "example": 1
                },
                "subscriptionId": {
                    "type": "integer",
                    "example": 1
                },
                "username": {
                    "type": "string",
                    "example": "johndoe"
                }
            }
        },
        "presenters.UserErrorResponse": {
            "description": "Error response for user operations",
            "type": "object",
            "properties": {
                "data": {
                    "type": "string",
                    "example": "null"
                },
                "error": {
                    "type": "string",
                    "example": "error message"
                },
                "status": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "presenters.UserSuccessResponse": {
            "description": "Success response containing user data",
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/presenters.User"
                },
                "error": {
                    "type": "string",
                    "example": "null"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Fiber User Service",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
