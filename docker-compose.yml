services:
  zookeeper:
    image: confluentinc/cp-zookeeper:6.1.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-server:6.1.1
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
  
  schema-registry:
    image: confluentinc/cp-schema-registry:6.1.1
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  control-center:
    image: confluentinc/cp-enterprise-control-center:6.1.1
    hostname: control-center
    container_name: control-center
    depends_on:
      - broker
      - schema-registry
      - connect
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_CONNECT_CLUSTER: 'connect:8083'
      CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://ksqldb-server:8088"
      CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://localhost:8088"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

  connect:
    image: cnfldemos/cp-server-connect-datagen:0.4.0-6.1.0
    hostname: connect
    container_name: connect
    depends_on:
      - broker
      - schema-registry
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'broker:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-6.1.1.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR

  postgres:
    image: postgres
    container_name: postgres
    restart: always
    ports:
      - "5433:5433"
    environment:
      - POSTGRES_PASSWORD=i_love_tuesdays123
      - POSTGRES_PORT=5433
      - POSTGRES_MULTIPLE_DATABASES=beats,unpublishedbeats,users,cart
    volumes:
      - ./pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: -p 5433

  beat:
    build:
      context: ./beat
      dockerfile: Dockerfile
    container_name: beat
    ports:
      - "7771:7771"
    restart: unless-stopped
    depends_on:
      - postgres
    environment:
      - DB_HOST=host.docker.internal
      - DB_PORT=5433
      - DB_USER=postgres
      - DB_PASSWORD=i_love_tuesdays123
      - DB_NAME=beats

  beatsupload:
    build:
      context: ./beatsUpload
      dockerfile: Dockerfile
    container_name: beatsupload
    ports:
      - "7774:7774"
    restart: unless-stopped
    depends_on:
      - postgres
    environment:
      - DB_HOST=postgres
      - DB_PORT=5433
      - DB_USER=postgres
      - DB_PASSWORD=i_love_tuesdays123
      - DB_NAME=unpublishedbeats

  user:
    build:
      context: ./user
      dockerfile: Dockerfile
    container_name: user
    ports:
      - "7773:7773"
    restart: unless-stopped
    depends_on:
      - postgres
    environment:
      - DB_HOST=postgres
      - DB_PORT=5433
      - DB_USER=postgres
      - DB_PASSWORD=i_love_tuesdays123
      - DB_NAME=users

  unpbeats:
    build:
      context: ./unpublished
      dockerfile: Dockerfile
    container_name: unpbeats
    ports:
      - "7772:7772"
    restart: unless-stopped
    depends_on:
      - postgres
    environment:
      - DB_HOST=postgres
      - DB_PORT=5433
      - DB_USER=postgres
      - DB_PASSWORD=i_love_tuesdays123
      - DB_NAME=unpublishedbeats

  mfcc:
    build:
      context: ./mfcc_app
      dockerfile: Dockerfile
    container_name: mfcc
    ports:
      - "8003:8003"
    restart: unless-stopped
    depends_on:
      broker:
        condition: service_started

  cart:
    build:
      context: ./cart
      dockerfile: Dockerfile
    container_name: cart
    ports:
      - "7775:7775"
    restart: unless-stopped
    depends_on:
      - postgres
    environment:
      - DB_HOST=host.docker.internal
      - DB_PORT=5433
      - DB_USER=postgres
      - DB_PASSWORD=i_love_tuesdays123
      - DB_NAME=cart

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - beat
      - beatsupload
      - user
      - unpbeats
      - cart
      - mfcc

volumes:
  postgres_data:
    driver: local

networks:
  default:
    driver: bridge