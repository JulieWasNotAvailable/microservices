// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/activity/listened": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Record that a user listened to a beat",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "listen"
                ],
                "summary": "Record a listen",
                "parameters": [
                    {
                        "description": "Listen data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.requestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Listen recorded",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/activity/postNewLike": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Add a like to a beat by the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "likes"
                ],
                "summary": "Like a beat",
                "parameters": [
                    {
                        "description": "Beat id data",
                        "name": "beatId",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.requestBody"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Like created successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/activity/totalLikesCountForBeats": {
            "post": {
                "description": "Get the total number of likes for a list of beats",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "likes"
                ],
                "summary": "Get total likes for multiple beats",
                "parameters": [
                    {
                        "description": "List of beat IDs",
                        "name": "requestBodyList",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.requestBodyList"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Total likes count",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/activity/viewLikesCountByBeatId/{beatId}": {
            "get": {
                "description": "Get the number of likes for a specific beat",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "likes"
                ],
                "summary": "Get like count for a beat",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Beat ID",
                        "name": "beatId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Like count",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/activity/viewLikesCountByUserId/{userId}": {
            "get": {
                "description": "Get the number of likes given by a specific user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "likes"
                ],
                "summary": "Get like count for a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Like count",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/activity/viewMyLikes": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get all likes by the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "likes"
                ],
                "summary": "Get user's likes",
                "responses": {
                    "200": {
                        "description": "List of likes",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/activity/{beatId}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Remove a like from a beat by the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "likes"
                ],
                "summary": "Remove a like",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Beat ID",
                        "name": "beatId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Like removed successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/beat/all": {
            "get": {
                "description": "Returns all beats in the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get all beats",
                "responses": {
                    "200": {
                        "description": "List of all beats",
                        "schema": {
                            "$ref": "#/definitions/presenters.BeatListResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/presenters.BeatErrorResponse"
                        }
                    }
                }
            }
        },
        "/beat/beatsByDate/{from}/{to}": {
            "get": {
                "description": "Returns beats created between the specified timestamps",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Filters"
                ],
                "summary": "Get beats by date range",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Start timestamp (Unix epoch)",
                        "name": "from",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "End timestamp (Unix epoch)",
                        "name": "to",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of beats in date range",
                        "schema": {
                            "$ref": "#/definitions/presenters.BeatListResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid timestamp format",
                        "schema": {
                            "$ref": "#/definitions/presenters.BeatErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/presenters.BeatErrorResponse"
                        }
                    }
                }
            }
        },
        "/beat/beatsByMoodId/{moodId}": {
            "get": {
                "description": "Returns beats matching a specific mood ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Filters"
                ],
                "summary": "Get beats by mood",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Mood ID",
                        "name": "moodId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of beats with this mood",
                        "schema": {
                            "$ref": "#/definitions/presenters.BeatListResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid mood ID",
                        "schema": {
                            "$ref": "#/definitions/presenters.BeatErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/presenters.BeatErrorResponse"
                        }
                    }
                }
            }
        },
        "/beat/byBeatId/{beatId}": {
            "get": {
                "description": "Returns a single beat by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get beat by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Beat ID in UUID format",
                        "name": "beatId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Beat details",
                        "schema": {
                            "$ref": "#/definitions/presenters.BeatSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid ID format",
                        "schema": {
                            "$ref": "#/definitions/presenters.BeatErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Beat not found",
                        "schema": {
                            "$ref": "#/definitions/presenters.BeatErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/presenters.BeatErrorResponse"
                        }
                    }
                }
            }
        },
        "/beat/byBeatmakerByJWT": {
            "get": {
                "description": "Returns all beats",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get beats by JWT",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Beatmaker ID in UUID format",
                        "name": "beatmakerId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of beats",
                        "schema": {
                            "$ref": "#/definitions/presenters.BeatListResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid ID format",
                        "schema": {
                            "$ref": "#/definitions/presenters.BeatErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/presenters.BeatErrorResponse"
                        }
                    }
                }
            }
        },
        "/beat/byBeatmakerId/{beatmakerId}": {
            "get": {
                "description": "Returns all beats for a specific beatmaker",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get beats by beatmaker",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Beatmaker ID in UUID format",
                        "name": "beatmakerId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of beats",
                        "schema": {
                            "$ref": "#/definitions/presenters.BeatListResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid ID format",
                        "schema": {
                            "$ref": "#/definitions/presenters.BeatErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/presenters.BeatErrorResponse"
                        }
                    }
                }
            }
        },
        "/beat/deleteBeatById/{id}": {
            "delete": {
                "description": "Deletes beat with the specified ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Beats"
                ],
                "summary": "Delete beat by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Beat ID (UUID format)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/presenters.BeatSuccessResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/presenters.BeatErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/presenters.BeatErrorResponse"
                        }
                    }
                }
            }
        },
        "/beat/exampleBeat": {
            "post": {
                "description": "Creates a new empty beat",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Create a beat",
                "parameters": [
                    {
                        "description": "Beat creation data",
                        "name": "beat",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.UnpublishedBeat"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created beat details",
                        "schema": {
                            "$ref": "#/definitions/presenters.BeatSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/presenters.BeatErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/presenters.BeatErrorResponse"
                        }
                    }
                }
            }
        },
        "/beat/filteredBeats": {
            "get": {
                "description": "Returns beats matching the provided filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Filters"
                ],
                "summary": "Filter beats",
                "parameters": [
                    {
                        "description": "Filter criteria",
                        "name": "filters",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/presenters.Filters"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Filtered list of beats",
                        "schema": {
                            "$ref": "#/definitions/presenters.BeatListResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid filter format",
                        "schema": {
                            "$ref": "#/definitions/presenters.BeatErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/presenters.BeatErrorResponse"
                        }
                    }
                }
            }
        },
        "/beat/withAllMoods": {
            "get": {
                "description": "Returns beats that match ALL the specified mood IDs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Filters"
                ],
                "summary": "Get beats by multiple moods",
                "parameters": [
                    {
                        "description": "Mood IDs to filter by",
                        "name": "filters",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/presenters.Filters"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of matching beats",
                        "schema": {
                            "$ref": "#/definitions/presenters.BeatListResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid mood format",
                        "schema": {
                            "$ref": "#/definitions/presenters.BeatErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/presenters.BeatErrorResponse"
                        }
                    }
                }
            }
        },
        "/metadata/genres": {
            "get": {
                "description": "Returns a list of all available music genres",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Metadata"
                ],
                "summary": "Get all genres",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/presenters.MetadataListResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/presenters.MetadataErrorResponse"
                        }
                    }
                }
            }
        },
        "/metadata/genres/popular": {
            "get": {
                "description": "Returns a list of currently popular genres",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Metadata"
                ],
                "summary": "Get trending genres",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/presenters.MetadataListResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/presenters.MetadataErrorResponse"
                        }
                    }
                }
            }
        },
        "/metadata/genresWithCount": {
            "get": {
                "description": "Returns a list of all available genre categories with the number of beats in them",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Metadata"
                ],
                "summary": "Get all gernes",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/presenters.MetadataListResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/presenters.MetadataErrorResponse"
                        }
                    }
                }
            }
        },
        "/metadata/keys": {
            "get": {
                "description": "Returns a list of all available musical keys",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Metadata"
                ],
                "summary": "Get all keys",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/presenters.MetadataListResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/presenters.MetadataErrorResponse"
                        }
                    }
                }
            }
        },
        "/metadata/mfccs": {
            "get": {
                "description": "Returns a list of all available MFCC data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Metadata"
                ],
                "summary": "Get all MFCCs",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/presenters.MetadataListResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/presenters.MetadataErrorResponse"
                        }
                    }
                }
            }
        },
        "/metadata/moods": {
            "get": {
                "description": "Returns a list of all available mood categories",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Metadata"
                ],
                "summary": "Get all moods",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/presenters.MetadataListResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/presenters.MetadataErrorResponse"
                        }
                    }
                }
            }
        },
        "/metadata/tags": {
            "get": {
                "description": "Returns a list of all available tags",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tags"
                ],
                "summary": "Get all tags",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/presenters.MetadataListResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/presenters.MetadataErrorResponse"
                        }
                    }
                }
            }
        },
        "/metadata/tags/byName/{name}": {
            "get": {
                "description": "Returns tag details for the specified name (ONLY 1 TAG WITH SPECIFIC NAME)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tags"
                ],
                "summary": "Get tag by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tag name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/presenters.MetadataSuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/presenters.MetadataErrorResponse"
                        }
                    }
                }
            }
        },
        "/metadata/tags/byNameLike/{name}": {
            "get": {
                "description": "Returns all of the tags for the specified name like%",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tags"
                ],
                "summary": "Get MANY tags by name LIKE",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tag name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/presenters.MetadataSuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/presenters.MetadataErrorResponse"
                        }
                    }
                }
            }
        },
        "/metadata/tags/in_trend": {
            "get": {
                "description": "Returns a list of popular genres. Takes beats that were created this month (today minus 30 days), counts, how frequently were they used in beat_genres table.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tags"
                ],
                "summary": "Get trending tags",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/presenters.MetadataListResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/presenters.MetadataErrorResponse"
                        }
                    }
                }
            }
        },
        "/metadata/tags/random": {
            "get": {
                "description": "Returns a list of randomly selected tags",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tags"
                ],
                "summary": "Get random tags",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/presenters.MetadataListResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/presenters.MetadataErrorResponse"
                        }
                    }
                }
            }
        },
        "/metadata/timestamps": {
            "get": {
                "description": "Returns a list of all available timestamps",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Timestamp"
                ],
                "summary": "Get all timestamps",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/presenters.MetadataListResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/presenters.MetadataErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "entities.AvailableFiles": {
            "type": "object",
            "properties": {
                "beatId": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "mp3url": {
                    "type": "string"
                },
                "wavurl": {
                    "type": "string"
                },
                "zipurl": {
                    "type": "string"
                }
            }
        },
        "entities.Beat": {
            "type": "object",
            "required": [
                "availableFiles",
                "beatmakerId",
                "bpm",
                "genres",
                "keynoteId",
                "moods",
                "name",
                "price",
                "tags",
                "timestamps",
                "url"
            ],
            "properties": {
                "availableFiles": {
                    "$ref": "#/definitions/entities.AvailableFiles"
                },
                "beatmakerId": {
                    "type": "string",
                    "example": "019628ef-cd76-7d2d-bf80-48b8011fad40"
                },
                "beatmakerName": {
                    "type": "string"
                },
                "bpm": {
                    "type": "integer",
                    "maximum": 400,
                    "minimum": 20,
                    "example": 120
                },
                "created_at": {
                    "type": "integer"
                },
                "description": {
                    "type": "string",
                    "maxLength": 5000,
                    "minLength": 2,
                    "example": "Chill summer beat with tropical influences"
                },
                "genres": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.Genre"
                    }
                },
                "id": {
                    "type": "string",
                    "example": "019628ef-cd76-7d2d-bf80-48b8011fad40"
                },
                "keynote": {
                    "description": "gorm:\"foreignKey:UnpublishedBeatID;constraint:OnDelete:CASCADE;\" validate:\"required\"                                       //keynote has many beats, but each beat has only one keynote` + "`" + `",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entities.Keynote"
                        }
                    ]
                },
                "keynoteId": {
                    "type": "integer",
                    "example": 11
                },
                "likes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.Like"
                    }
                },
                "moods": {
                    "description": "many to many",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.Mood"
                    }
                },
                "name": {
                    "type": "string",
                    "maxLength": 60,
                    "minLength": 2,
                    "example": "Summer Vibes"
                },
                "picture": {
                    "type": "string",
                    "example": "https://storage.yandexcloud.net/imagesall/019623bd-3d0b-7dc2-8a1f-f782adeb42b4"
                },
                "plays": {
                    "type": "integer",
                    "example": 105
                },
                "price": {
                    "type": "integer",
                    "example": 2999
                },
                "tags": {
                    "description": "many to many",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.Tag"
                    }
                },
                "timestamps": {
                    "description": "a beat has many timestamps, but each timestamp has only one beat",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.Timestamp"
                    }
                },
                "url": {
                    "type": "string",
                    "example": "https://storage.yandexcloud.net/mp3beats/019623bd-3d0b-7dc2-8a1f-f782adeb42b4"
                }
            }
        },
        "entities.Genre": {
            "type": "object",
            "properties": {
                "beat": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.Beat"
                    }
                },
                "createdAt": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "example": "Jerk"
                },
                "picture_url": {
                    "type": "string"
                }
            }
        },
        "entities.Keynote": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "entities.Like": {
            "type": "object",
            "properties": {
                "beat": {
                    "$ref": "#/definitions/entities.Beat"
                },
                "beatID": {
                    "type": "string"
                },
                "userID": {
                    "type": "string"
                }
            }
        },
        "entities.Mood": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "entities.Tag": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "entities.Timestamp": {
            "type": "object",
            "required": [
                "end_time",
                "start_time"
            ],
            "properties": {
                "beatId": {
                    "type": "string",
                    "example": "01963e01-e46c-7996-996a-42ad3df115ac"
                },
                "end_time": {
                    "type": "integer",
                    "maximum": 300,
                    "minimum": 2
                },
                "start_time": {
                    "type": "integer",
                    "maximum": 299,
                    "minimum": 1
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "entities.UnpublishedBeat": {
            "type": "object",
            "required": [
                "availableFiles",
                "beatmakerId",
                "bpm",
                "genres",
                "keynoteId",
                "moods",
                "name",
                "price",
                "tags",
                "timestamps"
            ],
            "properties": {
                "availableFiles": {
                    "$ref": "#/definitions/entities.AvailableFiles"
                },
                "beatmakerId": {
                    "type": "string",
                    "example": "019628ef-cd76-7d2d-bf80-48b8011fad40"
                },
                "beatmakerName": {
                    "type": "string"
                },
                "bpm": {
                    "type": "integer",
                    "maximum": 400,
                    "minimum": 20,
                    "example": 120
                },
                "created_at": {
                    "type": "integer"
                },
                "description": {
                    "type": "string",
                    "maxLength": 500,
                    "minLength": 2,
                    "example": "Chill summer beat with tropical influences"
                },
                "err": {
                    "type": "string"
                },
                "genres": {
                    "description": "many to many",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.Genre"
                    }
                },
                "id": {
                    "type": "string",
                    "example": "019628ef-cd76-7d2d-bf80-48b8011fad40"
                },
                "keynoteId": {
                    "description": "keynote has many beats, but each beat has only one keynote` + "`" + `",
                    "type": "integer",
                    "example": 11
                },
                "moods": {
                    "description": "many to many",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.Mood"
                    }
                },
                "name": {
                    "type": "string",
                    "maxLength": 60,
                    "minLength": 2,
                    "example": "Summer Vibes"
                },
                "picture": {
                    "type": "string",
                    "example": "https://storage.yandexcloud.net/imagesall/019623bd-3d0b-7dc2-8a1f-f782adeb42b4"
                },
                "price": {
                    "type": "integer",
                    "example": 2999
                },
                "sent_to_moderation_at": {
                    "type": "integer"
                },
                "status": {
                    "description": "Instruments        []Instrument   ` + "`" + `json:\"instruments\" gorm:\"many2many:instrument_beats\"` + "`" + `            //many to many",
                    "type": "string",
                    "example": "draft"
                },
                "tags": {
                    "description": "many to many",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.Tag"
                    }
                },
                "timestamps": {
                    "description": "a beat has many timestamps, but each timestamp has only one beat",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.Timestamp"
                    }
                },
                "updated_at": {
                    "type": "integer"
                }
            }
        },
        "handlers.requestBody": {
            "type": "object",
            "properties": {
                "beatId": {
                    "type": "string"
                }
            }
        },
        "handlers.requestBodyList": {
            "type": "object",
            "properties": {
                "beatids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "presenters.BeatErrorResponse": {
            "description": "BeatErrorResponse",
            "type": "object",
            "properties": {
                "data": {
                    "type": "string",
                    "example": ""
                },
                "error": {
                    "type": "string",
                    "example": "error message"
                },
                "status": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "presenters.BeatListResponse": {
            "description": "BeatListResponse",
            "type": "object",
            "properties": {
                "data": {},
                "error": {
                    "type": "string",
                    "example": ""
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "presenters.BeatSuccessResponse": {
            "description": "BeatSuccessResponse",
            "type": "object",
            "properties": {
                "data": {},
                "error": {
                    "type": "string",
                    "example": ""
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "presenters.Filters": {
            "type": "object",
            "properties": {
                "genres": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "items_num": {
                    "type": "integer"
                },
                "keynote": {
                    "type": "integer"
                },
                "max_bpm": {
                    "type": "integer"
                },
                "max_price": {
                    "type": "integer"
                },
                "min_bpm": {
                    "type": "integer"
                },
                "min_price": {
                    "type": "integer"
                },
                "moods": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "presenters.MetadataErrorResponse": {
            "description": "presenters.MetadataErrorResponse",
            "type": "object",
            "properties": {
                "data": {
                    "type": "string",
                    "example": ""
                },
                "error": {
                    "type": "string",
                    "example": "error message"
                },
                "status": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "presenters.MetadataListResponse": {
            "description": "presenters.MetadataListResponse",
            "type": "object",
            "properties": {
                "data": {},
                "error": {
                    "type": "string",
                    "example": ""
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "presenters.MetadataSuccessResponse": {
            "description": "presenters.MetadataSuccessResponse",
            "type": "object",
            "properties": {
                "data": {},
                "error": {
                    "type": "string",
                    "example": ""
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Fiber Beat Service",
	Description:      "Deals Beats, Beat_Listened, filtering",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
